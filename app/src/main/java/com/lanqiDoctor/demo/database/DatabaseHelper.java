package com.lanqiDoctor.demo.database;

//import com.lanqiDoctor.demo.aop.Log;

import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;  // üî• Ê∑ªÂä†ËøôË°åÂØºÂÖ•ÔºÅ

/**
 * Êï∞ÊçÆÂ∫ìÂ∏ÆÂä©Á±ª
 *
 * @author ËìùÂ≤êÂåªÁ´•ÂºÄÂèëÂõ¢Èòü
 * @version 1.0
 */
public class DatabaseHelper extends SQLiteOpenHelper {

    private static final String DATABASE_NAME = "lanqi_doctor.db";
    private static final int DATABASE_VERSION = 10; // ‰øÆÂ§ç‰π†ÊÉØË°®Â≠óÊÆµÁº∫Â§±ÈóÆÈ¢ò

    // ÂÅ•Â∫∑‰ø°ÊÅØË°®
    public static final String TABLE_HEALTH_INFO = "health_info";
    public static final String COLUMN_ID = "id";
    public static final String COLUMN_TIMESTAMP = "timestamp";
    public static final String COLUMN_AGE = "age";
    public static final String COLUMN_HEIGHT = "height";
    public static final String COLUMN_WEIGHT = "weight";
    public static final String COLUMN_HEART_RATE = "heart_rate";
    public static final String COLUMN_SYSTOLIC_PRESSURE = "systolic_pressure";
    public static final String COLUMN_DIASTOLIC_PRESSURE = "diastolic_pressure";
    public static final String COLUMN_BLOOD_SUGAR = "blood_sugar";
    public static final String COLUMN_REMARKS = "remarks";
    public static final String COLUMN_CREATE_TIME = "create_time";
    public static final String COLUMN_UPDATE_TIME = "update_time";
    //Êñ∞Â¢ûÁù°Áú†ÂíåÊ≠•Êï∞Â≠óÊÆµ
    public static final String COLUMN_STEPS = "steps";
    public static final String COLUMN_SLEEP_DURATION = "sleep_duration";
    // Áî®ËçØËÆ∞ÂΩïË°®
    public static final String TABLE_MEDICATION_RECORD = "medication_record";
    public static final String COLUMN_MEDICATION_NAME = "medication_name";
    public static final String COLUMN_DOSAGE = "dosage";
    public static final String COLUMN_FREQUENCY = "frequency";
    public static final String COLUMN_UNIT = "unit";
    public static final String COLUMN_START_DATE = "start_date";
    public static final String COLUMN_END_DATE = "end_date";
    public static final String COLUMN_REMINDER_TIMES = "reminder_times";
    public static final String COLUMN_NOTES = "notes";
    public static final String COLUMN_STATUS = "status";

    // ÊúçËçØËÆ∞ÂΩïË°®
    public static final String TABLE_MEDICATION_INTAKE = "medication_intake_record";
    public static final String COLUMN_MEDICATION_ID = "medication_id"; // ‰øùÁïô‰ΩÜ‰∏çÂÜç‰Ωú‰∏∫‰∏ªË¶ÅÂÖ≥ËÅîÂ≠óÊÆµ
    public static final String COLUMN_PLANNED_TIME = "planned_time";
    public static final String COLUMN_ACTUAL_TIME = "actual_time";
    public static final String COLUMN_ACTUAL_DOSAGE = "actual_dosage";

    //Áî®Êà∑IDÂ≠óÊÆµ
    public static final String COLUMN_USER_ID = "user_id";
    
    // Êó¢ÂæÄÁóÖÂè≤Ë°®
    public static final String TABLE_MEDICAL_HISTORY = "medical_history";
    public static final String COLUMN_DISEASE_NAME = "disease_name";
    public static final String COLUMN_DIAGNOSIS_DATE = "diagnosis_date";
    public static final String COLUMN_SEVERITY = "severity";
    public static final String COLUMN_TREATMENT_STATUS = "treatment_status";
    public static final String COLUMN_HOSPITAL = "hospital";
    public static final String COLUMN_DOCTOR = "doctor";
    public static final String COLUMN_SYMPTOMS = "symptoms";
    public static final String COLUMN_TREATMENT = "treatment";

    // ‰π†ÊÉØË°®
    public static final String TABLE_HABITS = "habits";
    public static final String COLUMN_HABIT_NAME = "habit_name";
    public static final String COLUMN_DESCRIPTION = "description";
    public static final String COLUMN_CATEGORY = "category";
    public static final String COLUMN_FREQUENCY_VALUE = "frequency_value";
    public static final String COLUMN_FREQUENCY_UNIT = "frequency_unit";
    public static final String COLUMN_DURATION = "duration";
    public static final String COLUMN_CYCLE_DAYS = "cycle_days";
    public static final String COLUMN_PRIORITY = "priority";
    public static final String COLUMN_BLOCK_TIMES = "block_times";
    public static final String COLUMN_IS_ACTIVE = "is_active";
    public static final String COLUMN_ENABLE_NOTIFICATION = "enable_notification";
    public static final String COLUMN_ENABLE_SYSTEM_ALARM = "enable_system_alarm";
    public static final String COLUMN_COMPLETED_DAYS = "completed_days";
    public static final String COLUMN_TOTAL_CHECK_INS = "total_check_ins";
    // ÂàõÂª∫ÂÅ•Â∫∑‰ø°ÊÅØË°®ÁöÑSQLËØ≠Âè•
    private static final String CREATE_HEALTH_INFO_TABLE = "CREATE TABLE " + TABLE_HEALTH_INFO + " (" +
            COLUMN_ID + " INTEGER PRIMARY KEY AUTOINCREMENT, " +
            COLUMN_TIMESTAMP + " INTEGER NOT NULL, " +
            COLUMN_AGE + " INTEGER, " +
            COLUMN_HEIGHT + " REAL, " +
            COLUMN_WEIGHT + " REAL, " +
            COLUMN_HEART_RATE + " INTEGER, " +
            COLUMN_SYSTOLIC_PRESSURE + " REAL, " +
            COLUMN_DIASTOLIC_PRESSURE + " REAL, " +
            COLUMN_BLOOD_SUGAR + " REAL, " +
            COLUMN_REMARKS + " TEXT, " +
            COLUMN_STEPS + " INTEGER, " + // Êñ∞Â¢û
            COLUMN_SLEEP_DURATION + " REAL, " + // Êñ∞Â¢û
            COLUMN_CREATE_TIME + " INTEGER NOT NULL, " +
            COLUMN_UPDATE_TIME + " INTEGER NOT NULL" +
            ")";

    // ÂàõÂª∫Áî®ËçØËÆ∞ÂΩïË°®ÁöÑSQLËØ≠Âè• - ËçØÁâ©ÂêçÁß∞‰Ωú‰∏∫‰∏ªÈîÆ
    private static final String CREATE_MEDICATION_RECORD_TABLE = "CREATE TABLE " + TABLE_MEDICATION_RECORD + " (" +
            COLUMN_ID + " INTEGER PRIMARY KEY AUTOINCREMENT, " +
            COLUMN_MEDICATION_NAME + " TEXT UNIQUE NOT NULL, " + // ËÆæÁΩÆ‰∏∫ÂîØ‰∏ÄÁ∫¶Êùü
            COLUMN_USER_ID + " TEXT NOT NULL, " + // Êñ∞Â¢ûÔºöÁî®Êà∑IDÂ≠óÊÆµ
            COLUMN_DOSAGE + " TEXT NOT NULL, " +
            COLUMN_FREQUENCY + " TEXT NOT NULL, " +
            COLUMN_UNIT + " TEXT NOT NULL, " +
            COLUMN_START_DATE + " INTEGER, " +
            COLUMN_END_DATE + " INTEGER, " +
            COLUMN_REMINDER_TIMES + " TEXT, " +
            COLUMN_NOTES + " TEXT, " +
            COLUMN_STATUS + " INTEGER DEFAULT 1, " +
            COLUMN_CREATE_TIME + " INTEGER NOT NULL, " +
            COLUMN_UPDATE_TIME + " INTEGER NOT NULL" +
            ")";

    // ÂàõÂª∫ÊúçËçØËÆ∞ÂΩïË°®ÁöÑSQLËØ≠Âè• - ‰ΩøÁî®ËçØÁâ©ÂêçÁß∞ÂÖ≥ËÅî
    private static final String CREATE_MEDICATION_INTAKE_TABLE = "CREATE TABLE " + TABLE_MEDICATION_INTAKE + " (" +
            COLUMN_ID + " INTEGER PRIMARY KEY AUTOINCREMENT, " +
            COLUMN_USER_ID + " TEXT NOT NULL, " + // ‰øÆÊîπÔºöÊîπ‰∏∫TEXTÁ±ªÂûã
            COLUMN_MEDICATION_ID + " INTEGER, " + // ‰øùÁïô‰ΩÜÂèØÈÄâ
            COLUMN_MEDICATION_NAME + " TEXT NOT NULL, " +
            COLUMN_PLANNED_TIME + " INTEGER NOT NULL, " +
            COLUMN_ACTUAL_TIME + " INTEGER, " +
            COLUMN_ACTUAL_DOSAGE + " TEXT, " +
            COLUMN_STATUS + " INTEGER DEFAULT 0, " +
            COLUMN_NOTES + " TEXT, " +
            COLUMN_CREATE_TIME + " INTEGER NOT NULL, " +
            COLUMN_UPDATE_TIME + " INTEGER NOT NULL, " +
            "FOREIGN KEY(" + COLUMN_MEDICATION_NAME + ") REFERENCES " + TABLE_MEDICATION_RECORD + "(" + COLUMN_MEDICATION_NAME + "), " +
            // üî• ‰øÆÂ§çÔºöÂîØ‰∏ÄÁ∫¶ÊùüÂøÖÈ°ªÂåÖÂê´ user_id
            "UNIQUE(" + COLUMN_USER_ID + ", " + COLUMN_MEDICATION_NAME + ", " + COLUMN_PLANNED_TIME + ")" +
            ")";

    // ÂàõÂª∫Êó¢ÂæÄÁóÖÂè≤Ë°®ÁöÑSQLËØ≠Âè•
    private static final String CREATE_MEDICAL_HISTORY_TABLE = "CREATE TABLE " + TABLE_MEDICAL_HISTORY + " (" +
            COLUMN_ID + " INTEGER PRIMARY KEY AUTOINCREMENT, " +
            COLUMN_USER_ID + " TEXT NOT NULL, " +
            COLUMN_DISEASE_NAME + " TEXT NOT NULL, " +
            COLUMN_DIAGNOSIS_DATE + " TEXT, " +
            COLUMN_SEVERITY + " TEXT, " +
            COLUMN_TREATMENT_STATUS + " TEXT, " +
            COLUMN_HOSPITAL + " TEXT, " +
            COLUMN_DOCTOR + " TEXT, " +
            COLUMN_SYMPTOMS + " TEXT, " +
            COLUMN_TREATMENT + " TEXT, " +
            COLUMN_NOTES + " TEXT, " +
            COLUMN_STATUS + " INTEGER DEFAULT 1, " +
            COLUMN_CREATE_TIME + " INTEGER NOT NULL, " +
            COLUMN_UPDATE_TIME + " INTEGER NOT NULL" +
            ")";

    // ÂàõÂª∫‰π†ÊÉØË°®ÁöÑSQLËØ≠Âè•
    private static final String CREATE_HABITS_TABLE = "CREATE TABLE " + TABLE_HABITS + " (" +
            COLUMN_ID + " INTEGER PRIMARY KEY AUTOINCREMENT, " +
            COLUMN_USER_ID + " TEXT NOT NULL, " +
            COLUMN_HABIT_NAME + " TEXT NOT NULL, " +
            COLUMN_DESCRIPTION + " TEXT, " +
            COLUMN_CATEGORY + " TEXT, " +
            COLUMN_FREQUENCY + " TEXT, " +
            COLUMN_FREQUENCY_VALUE + " INTEGER, " +
            COLUMN_FREQUENCY_UNIT + " TEXT, " +
            COLUMN_DURATION + " INTEGER, " +
            COLUMN_CYCLE_DAYS + " INTEGER, " +
            COLUMN_PRIORITY + " INTEGER, " +
            COLUMN_START_DATE + " TEXT, " +
            COLUMN_END_DATE + " TEXT, " +
            COLUMN_REMINDER_TIMES + " TEXT, " +
            COLUMN_BLOCK_TIMES + " TEXT, " +
            COLUMN_NOTES + " TEXT, " +
            COLUMN_IS_ACTIVE + " INTEGER DEFAULT 1, " +
            COLUMN_STATUS + " INTEGER DEFAULT 1, " +
            COLUMN_ENABLE_NOTIFICATION + " INTEGER DEFAULT 1, " +
            COLUMN_ENABLE_SYSTEM_ALARM + " INTEGER DEFAULT 0, " +
            COLUMN_COMPLETED_DAYS + " INTEGER DEFAULT 0, " +
            COLUMN_TOTAL_CHECK_INS + " INTEGER DEFAULT 0, " +
            COLUMN_CREATE_TIME + " INTEGER NOT NULL, " +
            COLUMN_UPDATE_TIME + " INTEGER NOT NULL" +
            ")";

    public DatabaseHelper(Context context) {
        super(context, DATABASE_NAME, null, DATABASE_VERSION);
    }

    @Override
    public void onCreate(SQLiteDatabase db) {
        db.execSQL(CREATE_HEALTH_INFO_TABLE);
        db.execSQL(CREATE_MEDICATION_RECORD_TABLE);
        db.execSQL(CREATE_MEDICATION_INTAKE_TABLE);
        db.execSQL(CREATE_MEDICAL_HISTORY_TABLE);
        db.execSQL(CREATE_HABITS_TABLE);
    }

    @Override
    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
        if (oldVersion < 2) {
            // ÂçáÁ∫ßÂà∞ÁâàÊú¨2ÔºåÊ∑ªÂä†Áî®ËçØÁõ∏ÂÖ≥Ë°®
            db.execSQL(CREATE_MEDICATION_RECORD_TABLE);
            db.execSQL(CREATE_MEDICATION_INTAKE_TABLE);
        }
        if (oldVersion < 3) {
            // ÂçáÁ∫ßÂà∞ÁâàÊú¨3Ôºå‰øÆÊîπË°®ÁªìÊûÑÊîØÊåÅÂü∫‰∫éÂêçÁß∞ÁöÑCRUD
            // ‰∏∫ËçØÁâ©ÂêçÁß∞Ê∑ªÂä†ÂîØ‰∏ÄÁ∫¶Êùü
            db.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS idx_medication_name ON " +
                    TABLE_MEDICATION_RECORD + "(" + COLUMN_MEDICATION_NAME + ")");

            // ‰∏∫ÊúçËçØËÆ∞ÂΩïÊ∑ªÂä†ËÅîÂêàÂîØ‰∏ÄÁ∫¶Êùü
            db.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS idx_intake_name_time ON " +
                    TABLE_MEDICATION_INTAKE + "(" + COLUMN_MEDICATION_NAME + ", " + COLUMN_PLANNED_TIME + ")");
        }
            // Êñ∞Â¢ûÔºöÂçáÁ∫ßÂà∞ÁâàÊú¨4ÔºåÊ∑ªÂä†Ê≠•Êï∞ÂíåÁù°Áú†Êó∂ÈïøÂ≠óÊÆµ
        if (oldVersion < 4) {
            db.execSQL("ALTER TABLE " + TABLE_HEALTH_INFO + " ADD COLUMN " + COLUMN_STEPS + " INTEGER");
            db.execSQL("ALTER TABLE " + TABLE_HEALTH_INFO + " ADD COLUMN " + COLUMN_SLEEP_DURATION + " REAL");
        }
            // Êñ∞Â¢ûÔºöÂçáÁ∫ßÂà∞ÁâàÊú¨5ÔºåÊ∑ªÂä† user_id Â≠óÊÆµ
        if (oldVersion < 5) {
            db.execSQL("ALTER TABLE " + TABLE_MEDICATION_INTAKE + " ADD COLUMN user_id INTEGER NOT NULL DEFAULT 0");
        }
            // Êñ∞Â¢ûÔºöÂçáÁ∫ßÂà∞ÁâàÊú¨6ÔºåÊ∑ªÂä† user_id Â≠óÊÆµÂà∞ medication_record Ë°®
        if (oldVersion < 6) {
            // ‰∏∫ medication_record Ë°®Ê∑ªÂä† user_id Â≠óÊÆµ
            db.execSQL("ALTER TABLE " + TABLE_MEDICATION_RECORD + " ADD COLUMN " + COLUMN_USER_ID + " TEXT NOT NULL DEFAULT ''");
            
            // Êõ¥Êñ∞ medication_intake_record Ë°®ÁöÑ user_id Â≠óÊÆµÁ±ªÂûãÔºàÂ¶ÇÊûúÈúÄË¶ÅÁöÑËØùÔºâ
            // Áî±‰∫éSQLite‰∏çÊîØÊåÅÁõ¥Êé•‰øÆÊîπÂ≠óÊÆµÁ±ªÂûãÔºåËøôÈáåÂÖàË∑≥ËøáÔºå‰ΩøÁî®ÈªòËÆ§ÂÄº0Ë°®Á§∫ËÄÅÊï∞ÊçÆ
        }
        // üî• Êñ∞Â¢ûÔºöÂçáÁ∫ßÂà∞ÁâàÊú¨7Ôºå‰øÆÂ§çÂîØ‰∏ÄÁ∫¶Êùü
        if (oldVersion < 7) {
            Log.d("DatabaseHelper", "ÂºÄÂßã‰øÆÂ§çÊï∞ÊçÆÂ∫ìÂîØ‰∏ÄÁ∫¶ÊùüÂà∞ÁâàÊú¨7");
            
            try {
                // Âà†Èô§ÊóßÁöÑÁ¥¢Âºï
                db.execSQL("DROP INDEX IF EXISTS idx_intake_name_time");
                Log.d("DatabaseHelper", "Âà†Èô§ÊóßÁ¥¢ÂºïÊàêÂäü");
                
                // ÂàõÂª∫Êñ∞ÁöÑÂåÖÂê´user_idÁöÑÂîØ‰∏ÄÁ¥¢Âºï
                db.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS idx_intake_user_name_time ON " +
                        TABLE_MEDICATION_INTAKE + "(" + COLUMN_USER_ID + ", " + 
                        COLUMN_MEDICATION_NAME + ", " + COLUMN_PLANNED_TIME + ")");
                
                Log.d("DatabaseHelper", "ÂàõÂª∫Êñ∞ÁöÑÂ§öÁî®Êà∑ÂîØ‰∏ÄÁ¥¢ÂºïÊàêÂäü");
                
                // üî• ÈáçË¶ÅÔºöÊ∏ÖÁêÜÂèØËÉΩÂ≠òÂú®ÁöÑÈáçÂ§çÊï∞ÊçÆ
                cleanDuplicateRecords(db);
                
            } 
            catch (Exception e) {
                Log.e("DatabaseHelper", "ÂçáÁ∫ßÊï∞ÊçÆÂ∫ìÂà∞ÁâàÊú¨7Â§±Ë¥•", e);
            }
        }
        
        // ÂçáÁ∫ßÂà∞ÁâàÊú¨8ÔºåÊ∑ªÂä†Êó¢ÂæÄÁóÖÂè≤Ë°®
        if (oldVersion < 8) {
            Log.d("DatabaseHelper", "ÂºÄÂßãÂçáÁ∫ßÊï∞ÊçÆÂ∫ìÂà∞ÁâàÊú¨8ÔºåÊ∑ªÂä†Êó¢ÂæÄÁóÖÂè≤Ë°®");
            try {
                db.execSQL(CREATE_MEDICAL_HISTORY_TABLE);
                Log.d("DatabaseHelper", "ÂàõÂª∫Êó¢ÂæÄÁóÖÂè≤Ë°®ÊàêÂäü");
            } catch (Exception e) {
                Log.e("DatabaseHelper", "ÂçáÁ∫ßÊï∞ÊçÆÂ∫ìÂà∞ÁâàÊú¨8Â§±Ë¥•", e);
            }
        }
        
        // ÂçáÁ∫ßÂà∞ÁâàÊú¨9ÔºåÊ∑ªÂä†‰π†ÊÉØË°®
        if (oldVersion < 9) {
            Log.d("DatabaseHelper", "ÂºÄÂßãÂçáÁ∫ßÊï∞ÊçÆÂ∫ìÂà∞ÁâàÊú¨9ÔºåÊ∑ªÂä†‰π†ÊÉØË°®");
            try {
                db.execSQL(CREATE_HABITS_TABLE);
                Log.d("DatabaseHelper", "ÂàõÂª∫‰π†ÊÉØË°®ÊàêÂäü");
            } catch (Exception e) {
                Log.e("DatabaseHelper", "ÂçáÁ∫ßÊï∞ÊçÆÂ∫ìÂà∞ÁâàÊú¨9Â§±Ë¥•", e);
            }
        }
        
        // ÂçáÁ∫ßÂà∞ÁâàÊú¨10Ôºå‰øÆÂ§ç‰π†ÊÉØË°®Áº∫Â§±Â≠óÊÆµ
        if (oldVersion < 10) {
            Log.d("DatabaseHelper", "ÂºÄÂßãÂçáÁ∫ßÊï∞ÊçÆÂ∫ìÂà∞ÁâàÊú¨10Ôºå‰øÆÂ§ç‰π†ÊÉØË°®Â≠óÊÆµ");
            try {
                // Âà†Èô§ÊóßÁöÑ‰π†ÊÉØË°®
                db.execSQL("DROP TABLE IF EXISTS " + TABLE_HABITS);
                // ÈáçÊñ∞ÂàõÂª∫ÂÖ∑ÊúâÂÆåÊï¥Â≠óÊÆµÁöÑ‰π†ÊÉØË°®
                db.execSQL(CREATE_HABITS_TABLE);
                Log.d("DatabaseHelper", "ÈáçÊñ∞ÂàõÂª∫‰π†ÊÉØË°®ÊàêÂäüÔºåÂåÖÂê´ÊâÄÊúâÂøÖÈúÄÂ≠óÊÆµ");
            } catch (Exception e) {
                Log.e("DatabaseHelper", "ÂçáÁ∫ßÊï∞ÊçÆÂ∫ìÂà∞ÁâàÊú¨10Â§±Ë¥•", e);
            }
        }
    }
        /**
     * Ê∏ÖÁêÜÈáçÂ§çÁöÑÊúçËçØËÆ∞ÂΩïÊï∞ÊçÆ
     */
    private void cleanDuplicateRecords(SQLiteDatabase db) {
        try {
            // Êü•ÊâæÊâÄÊúâÈáçÂ§çËÆ∞ÂΩïÔºàÁõ∏ÂêåËçØÁâ©ÂêçÁß∞ÂíåÊó∂Èó¥Ôºå‰ΩÜuser_id‰∏çÂêåÊàñ‰∏∫Á©∫Ôºâ
            String findDuplicatesSql = "SELECT medication_name, planned_time, COUNT(*) as count " +
                    "FROM " + TABLE_MEDICATION_INTAKE + " " +
                    "GROUP BY medication_name, planned_time " +
                    "HAVING count > 1";
            
            Cursor cursor = db.rawQuery(findDuplicatesSql, null);
            
            if (cursor != null && cursor.moveToFirst()) {
                Log.d("DatabaseHelper", "ÂèëÁé∞ÈáçÂ§çÊï∞ÊçÆÔºåÂºÄÂßãÊ∏ÖÁêÜ");
                
                do {
                    String medicationName = cursor.getString(0);
                    long plannedTime = cursor.getLong(1);
                    int count = cursor.getInt(2);
                    
                    Log.d("DatabaseHelper", "Ê∏ÖÁêÜÈáçÂ§çËÆ∞ÂΩï: " + medicationName + 
                          " Êó∂Èó¥: " + plannedTime + " ÈáçÂ§çÊï∞: " + count);
                    
                    // Âà†Èô§user_id‰∏∫Á©∫Êàñ‰∏∫'0'ÁöÑÈáçÂ§çËÆ∞ÂΩï
                    int deletedRows = db.delete(TABLE_MEDICATION_INTAKE,
                            COLUMN_MEDICATION_NAME + " = ? AND " +
                            COLUMN_PLANNED_TIME + " = ? AND " +
                            "(" + COLUMN_USER_ID + " IS NULL OR " + 
                            COLUMN_USER_ID + " = '' OR " + 
                            COLUMN_USER_ID + " = '0')",
                            new String[]{medicationName, String.valueOf(plannedTime)});
                    
                    Log.d("DatabaseHelper", "Âà†Èô§‰∫Ü " + deletedRows + " Êù°Êó†ÊïàÈáçÂ§çËÆ∞ÂΩï");
                    
                } while (cursor.moveToNext());
            }
            
            if (cursor != null) {
                cursor.close();
            }
            
            Log.d("DatabaseHelper", "ÈáçÂ§çÊï∞ÊçÆÊ∏ÖÁêÜÂÆåÊàê");
            
        } catch (Exception e) {
            Log.e("DatabaseHelper", "Ê∏ÖÁêÜÈáçÂ§çÊï∞ÊçÆÂ§±Ë¥•", e);
        }
    
    }

}